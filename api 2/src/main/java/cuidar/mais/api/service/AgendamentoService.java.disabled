package cuidar.mais.api.service;

import cuidar.mais.api.models.Agendamento;
import cuidar.mais.api.models.HorarioDisponivel;
import cuidar.mais.api.models.Usuario;
import cuidar.mais.api.repository.AgendamentoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Service
public class AgendamentoService {

    @Autowired
    private AgendamentoRepository agendamentoRepository;

    @Autowired
    private UsuarioService usuarioService;

    // Constantes para o horário especial "Indefinido"
    // Agora usando DiaEspecial.INDEFINIDO em vez de SUNDAY - nunca conflitará com dias reais
    // private static final LocalTime HORARIO_INDEFINIDO_INICIO = LocalTime.of(0, 0);
    // private static final LocalTime HORARIO_INDEFINIDO_FIM = LocalTime.of(0, 1);
    /**
     * Busca todos os agendamentos de um psicólogo
     */
    public List<Agendamento> buscarPorPsicologo(Long psicologoId) {
        Usuario psicologo = usuarioService.buscarPorId(psicologoId);
        return agendamentoRepository.findByPsicologo(psicologo);
    }

    /**
     * Busca todos os agendamentos ativos de um psicólogo
     */
    public List<Agendamento> buscarAtivosPorPsicologo(Long psicologoId) {
        Usuario psicologo = usuarioService.buscarPorId(psicologoId);
        return agendamentoRepository.findByPsicologoAndAtivo(psicologo, true);
    }

    /**
     * Busca todos os agendamentos de um psicólogo em uma data específica
     */
    public List<Agendamento> buscarPorPsicologoEData(Long psicologoId, LocalDate data) {
        Usuario psicologo = usuarioService.buscarPorId(psicologoId);
        return agendamentoRepository.findByPsicologoAndData(psicologo, data);
    }

    /**
     * Busca todos os agendamentos ativos de um psicólogo em uma data específica
     */
    public List<Agendamento> buscarAtivosPorPsicologoEData(Long psicologoId, LocalDate data) {
        Usuario psicologo = usuarioService.buscarPorId(psicologoId);
        return agendamentoRepository.findByPsicologoAndDataAndAtivo(psicologo, data, true);
    }

    /**
     * Verifica se um horário está disponível para agendamento
     * @param psicologoId ID do psicólogo
     * @param data Data do agendamento
     * @param horaInicio Hora de início do agendamento
     * @param horaFim Hora de fim do agendamento
     * @param pacienteId ID do paciente (opcional) - se fornecido, verifica se o horário pertence ao paciente
     * @return true se o horário estiver disponível, false caso contrário
     */
    public boolean isHorarioDisponivel(Long psicologoId, LocalDate data, LocalTime horaInicio, LocalTime horaFim, Long pacienteId) {
        // Se não houver agendamentos na tabela, todos os horários estão disponíveis
        long totalAgendamentos = agendamentoRepository.count();
        System.out.println("Total de agendamentos na tabela: " + totalAgendamentos);

        if (totalAgendamentos == 0) {
            System.out.println("Não há agendamentos na tabela, horário disponível: " + data + " " + horaInicio + "-" + horaFim);
            // Se não foi fornecido um pacienteId, o horário está disponível
            if (pacienteId == null) {
                return true;
            }
            // Se foi fornecido um pacienteId, verifica se o horário pertence ao paciente
            return horarioPertenceAoPaciente(pacienteId, data.getDayOfWeek(), horaInicio, horaFim);
        }

        Usuario psicologo = usuarioService.buscarPorId(psicologoId);

        // Se não foi fornecido um pacienteId, usa a verificação simples
        if (pacienteId == null) {
            boolean temConflito = agendamentoRepository.existsAgendamentoConflitante(psicologo, data, horaInicio, horaFim);
            System.out.println("Verificando disponibilidade para: " + data + " " + horaInicio + "-" + horaFim + " - Tem conflito: " + temConflito);
            return !temConflito;
        }

        // Se foi fornecido um pacienteId, primeiro verifica se o horário pertence ao paciente
        if (!horarioPertenceAoPaciente(pacienteId, data.getDayOfWeek(), horaInicio, horaFim)) {
            System.out.println("Verificando disponibilidade para: " + data + " " + horaInicio + "-" + horaFim + 
                              " - Horário não pertence ao paciente (ID: " + pacienteId + ")");
            return false;
        }

        // Verifica se há conflitos com outros pacientes
        List<Agendamento> agendamentosConflitantes = buscarAgendamentosConflitantes(psicologo, data, horaInicio, horaFim);

        // Se não há conflitos, o horário está disponível
        if (agendamentosConflitantes.isEmpty()) {
            System.out.println("Não há conflitos para: " + data + " " + horaInicio + "-" + horaFim);
            return true;
        }

        // Verifica se todos os conflitos são do mesmo paciente
        for (Agendamento conflito : agendamentosConflitantes) {
            // TODO: Update this to work with new model structure
            // Agendamento model doesn't have getPacienteId method anymore
            // For now, consider all conflicts as blocking
            System.out.println("Verificando disponibilidade para: " + data + " " + horaInicio + "-" + horaFim + 
                              " - Tem conflito com agendamento (ID: " + conflito.getId() + ")");
            return false;
        }

        // Se todos os conflitos são do mesmo paciente, o horário está disponível
        System.out.println("Verificando disponibilidade para: " + data + " " + horaInicio + "-" + horaFim + 
                          " - Tem conflito apenas com o próprio paciente (ID: " + pacienteId + ")");
        return true;
    }

    /**
     * Verifica se um horário pertence a um paciente
     * @param pacienteId ID do paciente
     * @param diaSemana Dia da semana do horário
     * @param horaInicio Hora de início do horário
     * @param horaFim Hora de fim do horário
     * @return true se o horário pertence ao paciente, false caso contrário
     */
    private boolean horarioPertenceAoPaciente(Long pacienteId, DayOfWeek diaSemana, LocalTime horaInicio, LocalTime horaFim) {
        try {
            // Busca o horário disponível do paciente
            HorarioDisponivel horario = getHorarioDisponivelDoPaciente(pacienteId);

            // Se o paciente não tem um horário associado, retorna false
            if (horario == null) {
                return false;
            }

            // Verifica se o dia e horário correspondem ao horário associado ao paciente
            return horario.getDiaSemana().equals(diaSemana) && 
                   horario.getHoraInicio().equals(horaInicio) && 
                   horario.getHoraFim().equals(horaFim);
        } catch (Exception e) {
            System.err.println("Erro ao verificar se horário pertence ao paciente: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Obtém o horário disponível associado a um paciente
     * @param pacienteId ID do paciente
     * @return O horário disponível associado ao paciente, ou null se o paciente não tiver um horário associado
     */
    private HorarioDisponivel getHorarioDisponivelDoPaciente(Long pacienteId) {
        try {
            // TODO: Update this to work with new model structure
            // Paciente model doesn't have getHorarioDisponivel method anymore
            // Return null for now
            return null;
        } catch (Exception e) {
            System.err.println("Erro ao obter horário disponível do paciente: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Sobrecarga do método isHorarioDisponivel para manter compatibilidade com código existente
     */
    public boolean isHorarioDisponivel(Long psicologoId, LocalDate data, LocalTime horaInicio, LocalTime horaFim) {
        return isHorarioDisponivel(psicologoId, data, horaInicio, horaFim, null);
    }

    /**
     * Busca todos os agendamentos que conflitam com um horário específico
     * @param psicologo Psicólogo
     * @param data Data do agendamento
     * @param horaInicio Hora de início do agendamento
     * @param horaFim Hora de fim do agendamento
     * @return Lista de agendamentos conflitantes
     */
    public List<Agendamento> buscarAgendamentosConflitantes(Usuario psicologo, LocalDate data, LocalTime horaInicio, LocalTime horaFim) {
        return agendamentoRepository.findAgendamentosConflitantes(psicologo, data, horaInicio, horaFim);
    }

    /**
     * Cria um novo agendamento
     */
    @Transactional
    public Agendamento criar(Agendamento agendamento) {
        // TODO: Update this method to work with new model structure
        // Current Agendamento model doesn't support getPacienteId
        throw new RuntimeException("Agendamento service needs to be updated for new model structure");
    }

    /**
     * Atualiza o status de um agendamento
     * Se o status for CANCELADO ou CONCLUIDO, o agendamento é marcado como inativo
     */
    @Transactional
    public Agendamento atualizarStatus(Long agendamentoId, Agendamento.StatusAgendamento novoStatus) {
        Agendamento agendamento = agendamentoRepository.findById(agendamentoId)
                .orElseThrow(() -> new RuntimeException("Agendamento não encontrado"));

        agendamento.setStatus(novoStatus);

        // Se o status for CANCELADO ou CONCLUIDO, marca o agendamento como inativo
        if (novoStatus == Agendamento.StatusAgendamento.CANCELADO ||
                novoStatus == Agendamento.StatusAgendamento.CONCLUIDO) {
            agendamento.setAtivo(false);
        }

        return agendamentoRepository.save(agendamento);
    }

    /**
     * Busca todos os agendamentos de um paciente
     */
    public List<Agendamento> buscarPorPaciente(Long pacienteId) {
        try {
            System.out.println("[AgendamentoService] Buscando paciente com ID: " + pacienteId);
            // TODO: Update this to work with new model structure
            // Agendamento model doesn't have getPacienteId method anymore
            System.out.println("[AgendamentoService] Agendamento service needs to be updated for new model structure");
            return new ArrayList<>();
        } catch (Exception e) {
            System.err.println("[AgendamentoService] Erro ao buscar agendamentos para o paciente com ID: " + pacienteId);
            e.printStackTrace();
            throw e;
        }
    }

    public List<Agendamento> buscarAgendamentosFuturosPorPaciente(Long pacienteId) {
        LocalDate hoje = LocalDate.now();
        return agendamentoRepository.findByPacienteIdAndDataGreaterThanEqual(pacienteId, hoje);
    }

    /**
     * Busca todos os agendamentos ativos de um paciente
     */
    public List<Agendamento> buscarAtivosPorPaciente(Long pacienteId) {
        return agendamentoRepository.findByPacienteIdAndAtivo(pacienteId, true);
    }

    /**
     * Busca todos os agendamentos agendados de um paciente
     */
    public List<Agendamento> buscarAgendadosPorPaciente(Long pacienteId) {
        return agendamentoRepository.findByPacienteIdAndStatus(pacienteId, Agendamento.StatusAgendamento.AGENDADO);
    }

    /**
     * Busca todos os agendamentos ativos e agendados de um paciente
     */
    public List<Agendamento> buscarAtivosEAgendadosPorPaciente(Long pacienteId) {
        try {
            System.out.println("[AgendamentoService] Buscando paciente com ID: " + pacienteId);
            // TODO: Update this to work with new model structure
            // Agendamento model doesn't have getPacienteId method anymore
            System.out.println("[AgendamentoService] Agendamento service needs to be updated for new model structure");
            return new ArrayList<>();
        } catch (Exception e) {
            System.err.println("[AgendamentoService] Erro ao buscar agendamentos ativos e agendados para o paciente com ID: " + pacienteId);
            e.printStackTrace();
            // Em vez de lançar a exceção, retorna uma lista vazia ou lança uma exceção específica do serviço
            return new ArrayList<>();
        }
    }

    /**
     * Busca todos os agendamentos de uma série
     */
    public List<Agendamento> buscarAgendamentosPorSerie(UUID serieId) {
        return agendamentoRepository.findBySerieId(serieId);
    }

    /**
     * Busca todos os agendamentos ativos de uma série
     */
    public List<Agendamento> buscarAtivosPorSerieId(UUID serieId) {
        return agendamentoRepository.findBySerieIdAndAtivo(serieId, true);
    }

    /**
     * Busca todos os agendamentos ativos e agendados de uma série
     */
    public List<Agendamento> buscarAtivosEAgendadosPorSerieId(UUID serieId) {
        return agendamentoRepository.findBySerieIdAndStatusAndAtivo(serieId, Agendamento.StatusAgendamento.AGENDADO, true);
    }

    /**
     * Atualiza o dia e horário de todos os agendamentos ativos e agendados de uma série
     * @param serieId ID da série de agendamentos
     * @param diaSemana Novo dia da semana
     * @param horaInicio Nova hora de início
     * @param horaFim Nova hora de fim
     * @return Lista de agendamentos atualizados
     */
    @Transactional
    public List<Agendamento> atualizarDiaEHorarioDaSerie(UUID serieId, DayOfWeek diaSemana, LocalTime horaInicio, LocalTime horaFim) {
        List<Agendamento> agendamentos = buscarAtivosEAgendadosPorSerieId(serieId);
        List<Agendamento> agendamentosAtualizados = new ArrayList<>();

        // Se não há agendamentos, não há nada para atualizar
        if (agendamentos.isEmpty()) {
            return agendamentosAtualizados;
        }

        // TODO: Update this method to work with new model structure
        // Current Agendamento model doesn't support getPacienteId and setHorarioDisponivel
        throw new RuntimeException("Agendamento service needs to be updated for new model structure");
    }
}
